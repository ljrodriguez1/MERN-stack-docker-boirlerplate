{"version":3,"sources":["utils/setAuthToken.js","actions/authActions.js","actions/types.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","components/layout/Navbar.js","components/layout/Landing.js","components/auth/Register.js","components/auth/Login.js","components/private-route/PrivateRoute.js","components/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","Navbar","className","to","style","fontFamily","Component","Landing","height","width","borderRadius","letterSpacing","Register","onChange","e","setState","target","id","value","onSubmit","preventDefault","newUser","name","email","password","password2","props","registerUser","history","this","push","nextProps","paddingLeft","noValidate","error","classnames","invalid","htmlFor","marginTop","connect","userData","post","then","res","catch","err","response","data","withRouter","Login","loginUser","emailnotfound","passwordincorrect","setItem","jwt_decode","component","rest","render","Dashboard","onLogoutClick","split","onClick","jwtToken","currentTime","Date","now","exp","window","location","href","App","exact","path","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.34f3ef07.chunk.js","sourcesContent":["import axios from \"axios\";\nconst setAuthToken = token => {\n  if (token) {\n    // Apply authorization token to every request if logged in\n    axios.defaults.headers.common[\"Authorization\"] = token;\n  } else {\n    // Delete auth header\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n};\nexport default setAuthToken;","import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"./types\";\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n// Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};","export const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import {\n    SET_CURRENT_USER,\n    USER_LOADING\n} from \"../actions/types\";\n\nconst isEmpty = require(\"is-empty\");\n\n\nconst initialState = {\n  isAuthenticated: false,\n  user: {},\n  loading: false\n};\nexport default function authReducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        isAuthenticated: !isEmpty(action.payload),\n        user: action.payload\n      };\n    case USER_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    default:\n      return state;\n  }\n}","import { GET_ERRORS } from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function errorReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return action.payload;\n    default:\n      return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducer\";\nimport errorReducer from \"./errorReducer\";\n\nexport default combineReducers({\n  auth: authReducer,\n  errors: errorReducer\n});","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/index\";\n\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n  )\n);\nexport default store;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nclass Navbar extends Component {\n  render() {\n    return (\n      <div className=\"navbar-fixed\">\n        <nav className=\"z-depth-0\">\n          <div className=\"nav-wrapper white\">\n            <Link\n              to=\"/\"\n              style={{\n                fontFamily: \"monospace\"\n              }}\n              className=\"col s5 brand-logo center black-text\"\n            >\n              <i className=\"material-icons\">code</i>\n              MERN\n            </Link>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\nexport default Navbar;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nclass Landing extends Component {\n  render() {\n    return (\n      <div style={{ height: \"75vh\" }} className=\"container valign-wrapper\">\n        <div className=\"row\">\n          <div className=\"col s12 center-align\">\n            <h4>\n              <b>Build</b> a login/auth app with the{\" \"}\n              <span style={{ fontFamily: \"monospace\" }}>MERN</span> stack from\n              scratch\n            </h4>\n            <p className=\"flow-text grey-text text-darken-1\">\n              Create a (minimal) full-stack app with user authentication via\n              passport and JWTs\n            </p>\n            <br />\n            <div className=\"col s6\">\n              <Link\n                to=\"/register\"\n                style={{\n                  width: \"140px\",\n                  borderRadius: \"3px\",\n                  letterSpacing: \"1.5px\"\n                }}\n                className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n              >\n                Register\n              </Link>\n            </div>\n            <div className=\"col s6\">\n              <Link\n                to=\"/login\"\n                style={{\n                  width: \"140px\",\n                  borderRadius: \"3px\",\n                  letterSpacing: \"1.5px\"\n                }}\n                className=\"btn btn-large btn-flat waves-effect white black-text\"\n              >\n                Log In\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Landing;","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\nclass Register extends Component {\n    constructor() {\n        super();\n        this.state = {\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        password2: \"\",\n        errors: {}\n        };\n    }\n    componentDidMount() {\n        // If logged in and user navigates to Register page, should redirect them to dashboard\n        if (this.props.auth.isAuthenticated) {\n          this.props.history.push(\"/dashboard\");\n        }\n      }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n        this.setState({\n            errors: nextProps.errors\n        });\n        }\n    }\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value });\n    };\n    onSubmit = e => {\n        e.preventDefault();\n    const newUser = {\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password,\n        password2: this.state.password2\n        };\n    this.props.registerUser(newUser, this.props.history); \n    };\n    render() {\n        const { errors } = this.state;\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n            <div className=\"col s8 offset-s2\">\n                <Link to=\"/\" className=\"btn-flat waves-effect\">\n                <i className=\"material-icons left\">keyboard_backspace</i> Back to\n                home\n                </Link>\n                <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                <h4>\n                    <b>Register</b> below\n                </h4>\n                <p className=\"grey-text text-darken-1\">\n                    Already have an account? <Link to=\"/login\">Log in</Link>\n                </p>\n                </div>\n                <form noValidate onSubmit={this.onSubmit}>\n                <div className=\"input-field col s12\">\n                    <input\n                    onChange={this.onChange}\n                    value={this.state.name}\n                    error={errors.name}\n                    id=\"name\"\n                    type=\"text\"\n                    className={classnames(\"\", {\n                        invalid: errors.name\n                    })}\n                    />\n                    <label htmlFor=\"name\">Name</label>\n                    <span className=\"red-text\">{errors.name}</span>\n                </div>\n                <div className=\"input-field col s12\">\n                    <input\n                    onChange={this.onChange}\n                    value={this.state.email}\n                    error={errors.email}\n                    id=\"email\"\n                    type=\"email\"\n                    className={classnames(\"\", {\n                        invalid: errors.email\n                    })}\n                    />\n                    <label htmlFor=\"email\">Email</label>\n                    <span className=\"red-text\">{errors.email}</span>\n                </div>\n                <div className=\"input-field col s12\">\n                    <input\n                    onChange={this.onChange}\n                    value={this.state.password}\n                    error={errors.password}\n                    id=\"password\"\n                    type=\"password\"\n                    className={classnames(\"\", {\n                        invalid: errors.password\n                    })}\n                    />\n                    <label htmlFor=\"password\">Password</label>\n                    <span className=\"red-text\">{errors.password}</span>\n                </div>\n                <div className=\"input-field col s12\">\n                    <input\n                    onChange={this.onChange}\n                    value={this.state.password2}\n                    error={errors.password2}\n                    id=\"password2\"\n                    type=\"password\"\n                    className={classnames(\"\", {\n                        invalid: errors.password2\n                    })}\n                    />\n                    <label htmlFor=\"password2\">Confirm Password</label>\n                    <span className=\"red-text\">{errors.password2}</span>\n                </div>\n                <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                    <button\n                    style={{\n                        width: \"150px\",\n                        borderRadius: \"3px\",\n                        letterSpacing: \"1.5px\",\n                        marginTop: \"1rem\"\n                    }}\n                    type=\"submit\"\n                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                    >\n                    Sign up\n                    </button>\n                </div>\n                </form>\n            </div>\n            </div>\n        </div>\n        );\n    }\n}\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\nexport default connect(\n  mapStateToProps,\n  { registerUser }\n)(withRouter(Register));","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loginUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: \"\",\n      password: \"\",\n      errors: {}\n    };\n  }\n  componentDidMount() {\n    // If logged in and user navigates to Login page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n  }\ncomponentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\"); // push user to dashboard when they login\n    }\nif (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\nonChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\nonSubmit = e => {\n    e.preventDefault();\nconst userData = {\n      email: this.state.email,\n      password: this.state.password\n    };\nthis.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\n  };\nrender() {\n    const { errors } = this.state;\nreturn (\n      <div className=\"container\">\n        <div style={{ marginTop: \"4rem\" }} className=\"row\">\n          <div className=\"col s8 offset-s2\">\n            <Link to=\"/\" className=\"btn-flat waves-effect\">\n              <i className=\"material-icons left\">keyboard_backspace</i> Back to\n              home\n            </Link>\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n              <h4>\n                <b>Login</b> below\n              </h4>\n              <p className=\"grey-text text-darken-1\">\n                Don't have an account? <Link to=\"/register\">Register</Link>\n              </p>\n            </div>\n            <form noValidate onSubmit={this.onSubmit}>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.email}\n                  error={errors.email}\n                  id=\"email\"\n                  type=\"email\"\n                  className={classnames(\"\", {\n                    invalid: errors.email || errors.emailnotfound\n                  })}\n                />\n                <label htmlFor=\"email\">Email</label>\n                <span className=\"red-text\">\n                  {errors.email}\n                  {errors.emailnotfound}\n                </span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.password}\n                  error={errors.password}\n                  id=\"password\"\n                  type=\"password\"\n                  className={classnames(\"\", {\n                    invalid: errors.password || errors.passwordincorrect\n                  })}\n                />\n                <label htmlFor=\"password\">Password</label>\n                <span className=\"red-text\">\n                  {errors.password}\n                  {errors.passwordincorrect}\n                </span>\n              </div>\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                <button\n                  style={{\n                    width: \"150px\",\n                    borderRadius: \"3px\",\n                    letterSpacing: \"1.5px\",\n                    marginTop: \"1rem\"\n                  }}\n                  type=\"submit\"\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                >\n                  Login\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nLogin.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\nexport default connect(\n  mapStateToProps,\n  { loginUser }\n)(Login);","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      auth.isAuthenticated === true ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to=\"/login\" />\n      )\n    }\n  />\n);\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\nexport default connect(mapStateToProps)(PrivateRoute);","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\nclass Dashboard extends Component {\n  onLogoutClick = e => {\n    e.preventDefault();\n    this.props.logoutUser();\n  };\nrender() {\n    const { user } = this.props.auth;\nreturn (\n      <div style={{ height: \"75vh\" }} className=\"container valign-wrapper\">\n        <div className=\"row\">\n          <div className=\"col s12 center-align\">\n            <h4>\n              <b>Hey there,</b> {user.name.split(\" \")[0]}\n              <p className=\"flow-text grey-text text-darken-1\">\n                You are logged into a full-stack{\" \"}\n                <span style={{ fontFamily: \"monospace\" }}>MERN</span> app 👏\n              </p>\n            </h4>\n            <button\n              style={{\n                width: \"150px\",\n                borderRadius: \"3px\",\n                letterSpacing: \"1.5px\",\n                marginTop: \"1rem\"\n              }}\n              onClick={this.onLogoutClick}\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n            >\n              Logout\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nDashboard.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\nexport default connect(\n  mapStateToProps,\n  { logoutUser }\n)(Dashboard);","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Navbar from \"./components/layout/Navbar\";\nimport Landing from \"./components/layout/Landing\";\nimport Register from \"./components/auth/Register\";\nimport Login from \"./components/auth/Login\";\nimport PrivateRoute from \"./components/private-route/PrivateRoute\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n// Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <Navbar />\n            <Route exact path=\"/\" component={Landing} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Switch>\n              <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}